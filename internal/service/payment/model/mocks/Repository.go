// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	log "github.com/grvsahil/golang-kafka/kafka-consumer/internal/log"
	mock "github.com/stretchr/testify/mock"

	model "github.com/grvsahil/golang-kafka/kafka-consumer/internal/service/payment/model"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, _a1, records
func (_m *Repository) Add(ctx context.Context, _a1 log.Logger, records []*model.Payment) error {
	ret := _m.Called(ctx, _a1, records)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, log.Logger, []*model.Payment) error); ok {
		r0 = rf(ctx, _a1, records)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, _a1
func (_m *Repository) Get(ctx context.Context, _a1 log.Logger) ([]*model.Payment, error) {
	ret := _m.Called(ctx, _a1)

	var r0 []*model.Payment
	if rf, ok := ret.Get(0).(func(context.Context, log.Logger) []*model.Payment); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, log.Logger) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
